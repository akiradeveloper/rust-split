require "benchmark"

desc "Run all tests"
task "run_tests"

NEW_SPLIT="~/coreutils/build/split"
# NEW_SPLIT="split"
OLD_SPLIT="split"
# BUSYBOX_SRC="~/busybox-1.22.1"
# OLD_SPLIT="#{BUSYBOX_SRC}/busybox split"

# args = options input
def register_test(no, args)
  run_split = lambda do |which| 
    call_new = which == "new"
    command = call_new ? NEW_SPLIT : OLD_SPLIT
    prefix = call_new ? "NEW" : "OLD"
    com = command + " " + args + " "  + prefix
    result = Benchmark.realtime do
      `#{com}`
    end
    result
  end

  check_output = lambda do
    new_list = `ls NEW*`.split
    old_list = `ls OLD*`.split
    raise "#{no}: the number of output files not same" unless new_list.size == old_list.size

    # string, string -> bool
    file_check = lambda do |a, b|
      eq = File.read(a) == File.read(b)
      raise "#{no}: file content not same" unless eq
    end

    new_list.each do |a|
      b = "OLD" + a.slice(3, a.size - 3)
      file_check.call(a, b)
    end
  end

  desc "run test #{no} (#{args})"
  task "run#{no}" do    
    `rm NEW* OLD*`
    print "#{no}, "
    t1 = run_split.call("new")
    t2 = run_split.call("old")
    puts "new(#{t1}), old(#{t2})"
    check_output.call
  end
  task "run_tests" => "run#{no}"
end 

desc "clean up output files"
task "clean" do
  `rm NEW* OLD*`
end

register_test(0, "-a 5 -l 1 TEST0")
register_test(1, "-b 1 TEST0")
register_test(2, "-b 4 TEST0")

touch "GENTESTS"
def register_gentests
  gentests = File.read("GENTESTS").split "\n"
  gentests.each_with_index do |args, i|
    register_test(1000 + i, "#{args} GEN#{i}")
  end
end
register_gentests

@gen_i = 0
def generate_random_file(range)
  f = "GEN#{@gen_i}"
  touch f

  l1 = (1..rand(range)).to_a.map { |x| 'a' }
  l2 = (1..rand(1..10)).to_a.map { |x| rand(1..(l1.size-1)) }
  l2.sort!
  l2.reverse!

  l2.each do |i|
    l1.insert(i, "\n")
  end

  File.open(f, "w") do |handle|
    s = l1.join
    handle.write(s)
  end
end

def generate_random_test(type, range)
  args = "-#{type} #{rand(range)}" 
  sh "echo #{args} >> GENTESTS"
  @gen_i += 1
end

N=10
desc "generate tests"
task "gen_tests" do
  `rm GEN*`
  sh "echo -n > GENTESTS" # clean
  N.times do
    generate_random_file(10..1000)
    generate_random_test('l', 1..1000)
  end
  N.times do
    generate_random_file(10..1000)
    generate_random_test('b', 1..1000)
  end
  # N.times do
  #   generate_random_file(10..1000)
  #   generate_random_test('C', 1..1000)
  # end
end
